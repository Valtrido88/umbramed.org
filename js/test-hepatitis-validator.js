// Test de validaci√≥n para el Interpretador Serol√≥gico VHB
// Este archivo puede ser ejecutado en la consola del navegador para validar la funcionalidad

console.log('üß™ Iniciando pruebas de validaci√≥n del Interpretador VHB...');

// Test 1: Verificar que las funciones principales est√©n definidas
const functionsToTest = [
    'initializeHepatitisInterpreter',
    'setupEventListeners',
    'handleFileSelect',
    'processFile',
    'analyzeReport',
    'performGeminiAnalysis',
    'displayReport',
    'showLoading',
    'showError',
    'hideError'
];

let allFunctionsExist = true;
functionsToTest.forEach(funcName => {
    if (typeof window[funcName] !== 'function') {
        console.error(`‚ùå Funci√≥n ${funcName} no encontrada`);
        allFunctionsExist = false;
    } else {
        console.log(`‚úÖ Funci√≥n ${funcName} disponible`);
    }
});

if (allFunctionsExist) {
    console.log('‚úÖ Todas las funciones principales est√°n disponibles');
} else {
    console.error('‚ùå Algunas funciones no est√°n disponibles');
}

// Test 2: Verificar elementos DOM
const elementsToTest = [
    'drop-zone',
    'file-input',
    'file-preview',
    'upload-prompt',
    'lab-report-text',
    'analyze-button',
    'loading-spinner',
    'error-display',
    'report-display'
];

let allElementsExist = true;
elementsToTest.forEach(elementId => {
    const element = document.getElementById(elementId);
    if (!element) {
        console.error(`‚ùå Elemento ${elementId} no encontrado`);
        allElementsExist = false;
    } else {
        console.log(`‚úÖ Elemento ${elementId} encontrado`);
    }
});

if (allElementsExist) {
    console.log('‚úÖ Todos los elementos DOM est√°n disponibles');
} else {
    console.error('‚ùå Algunos elementos DOM no est√°n disponibles');
}

// Test 3: Verificar configuraci√≥n de API
if (typeof GEMINI_API_KEY !== 'undefined' && GEMINI_API_KEY.length > 0) {
    console.log('‚úÖ API Key de Gemini configurada');
} else {
    console.error('‚ùå API Key de Gemini no configurada');
}

if (typeof GEMINI_API_URL !== 'undefined' && GEMINI_API_URL.includes('generativelanguage.googleapis.com')) {
    console.log('‚úÖ URL de API Gemini configurada correctamente');
} else {
    console.error('‚ùå URL de API Gemini no configurada correctamente');
}

// Test 4: Verificar que no hay errores en la consola
const originalError = console.error;
let errorCount = 0;
console.error = function(...args) {
    errorCount++;
    originalError.apply(console, args);
};

setTimeout(() => {
    console.error = originalError;
    if (errorCount === 0) {
        console.log('‚úÖ No hay errores en la consola');
    } else {
        console.warn(`‚ö†Ô∏è Se encontraron ${errorCount} errores en la consola`);
    }
    
    console.log('üß™ Pruebas de validaci√≥n completadas');
}, 1000);

// Test 5: Funci√≥n de prueba simulada (opcional)
window.testGeminiConnection = async function() {
    console.log('üîó Probando conexi√≥n con Gemini API...');
    try {
        const testPrompt = "Test de conexi√≥n";
        const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contents: [{
                    parts: [{
                        text: testPrompt
                    }]
                }],
                generationConfig: {
                    temperature: 0.1,
                    maxOutputTokens: 100,
                }
            })
        });
        
        if (response.ok) {
            console.log('‚úÖ Conexi√≥n con Gemini API exitosa');
            return true;
        } else {
            console.error('‚ùå Error en la conexi√≥n con Gemini API:', response.status);
            return false;
        }
    } catch (error) {
        console.error('‚ùå Error al conectar con Gemini API:', error);
        return false;
    }
};

console.log('üí° Para probar la conexi√≥n con Gemini API, ejecuta: testGeminiConnection()');
