// Test de validaci√≥n para el Interpretador Serol√≥gico VHB
// Este archivo puede ser ejecutado en la consola del navegador para validar la funcionalidad

console.log('üß™ Iniciando pruebas de validaci√≥n del Interpretador VHB...');

// Test 1: Verificar que las funciones principales est√©n definidas
const functionsToTest = [
    'initializeHepatitisInterpreter',
    'setupEventListeners',
    'handleFileSelect',
    'processFile',
    'analyzeReport',
    'performAIAnalysis', // nuevo motor unificado
    'displayReport',
    'showLoading',
    'showError',
    'hideError'
];

let allFunctionsExist = true;
functionsToTest.forEach(funcName => {
    if (typeof window[funcName] !== 'function') {
        console.error(`‚ùå Funci√≥n ${funcName} no encontrada`);
        allFunctionsExist = false;
    } else {
        console.log(`‚úÖ Funci√≥n ${funcName} disponible`);
    }
});

if (allFunctionsExist) {
    console.log('‚úÖ Todas las funciones principales est√°n disponibles');
} else {
    console.error('‚ùå Algunas funciones no est√°n disponibles');
}

// Test 2: Verificar elementos DOM
const elementsToTest = [
    'drop-zone',
    'file-input',
    'file-preview',
    'upload-prompt',
    'lab-report-text',
    'analyze-button',
    'loading-spinner',
    'error-display',
    'report-display'
];

let allElementsExist = true;
elementsToTest.forEach(elementId => {
    const element = document.getElementById(elementId);
    if (!element) {
        console.error(`‚ùå Elemento ${elementId} no encontrado`);
        allElementsExist = false;
    } else {
        console.log(`‚úÖ Elemento ${elementId} encontrado`);
    }
});

if (allElementsExist) {
    console.log('‚úÖ Todos los elementos DOM est√°n disponibles');
} else {
    console.error('‚ùå Algunos elementos DOM no est√°n disponibles');
}

// Test 3: Verificar configuraci√≥n de endpoint IA gen√©rico o fallback local
if (typeof window.UMBRA_AI_ENDPOINT === 'string' && window.UMBRA_AI_ENDPOINT.length > 0) {
    console.log('‚úÖ Endpoint IA configurado:', window.UMBRA_AI_ENDPOINT);
} else {
    console.warn('‚ö†Ô∏è Endpoint IA no configurado: se usar√° fallback local basado en reglas');
}

// Test 4: Verificar que no hay errores en la consola
const originalError = console.error;
let errorCount = 0;
console.error = function(...args) {
    errorCount++;
    originalError.apply(console, args);
};

setTimeout(() => {
    console.error = originalError;
    if (errorCount === 0) {
        console.log('‚úÖ No hay errores en la consola');
    } else {
        console.warn(`‚ö†Ô∏è Se encontraron ${errorCount} errores en la consola`);
    }
    
    console.log('üß™ Pruebas de validaci√≥n completadas');
}, 1000);

// Test 5: Funci√≥n de prueba simulada (opcional)
window.testAIEndpoint = async function() {
    if(!window.UMBRA_AI_ENDPOINT){
        console.warn('‚ö†Ô∏è No hay endpoint configurado. Nada que probar.');
        return false;
    }
    console.log('üîó Probando conexi√≥n con endpoint IA...');
    try {
        const response = await fetch(window.UMBRA_AI_ENDPOINT, {
            method: 'POST',
            headers: {'Content-Type':'application/json'},
            body: JSON.stringify({prompt:'Ping diagn√≥stico serolog√≠a VHB', purpose:'diagnostic'})
        });
        if(response.ok){
            console.log('‚úÖ Endpoint IA responde HTTP 200');
            return true;
        } else {
            console.error('‚ùå Endpoint IA respondi√≥ c√≥digo', response.status);
            return false;
        }
    } catch(err){
        console.error('‚ùå Error conectando con endpoint IA:', err.message);
        return false;
    }
};

console.log('üí° Para probar la conexi√≥n con el endpoint IA ejecuta: testAIEndpoint()');
